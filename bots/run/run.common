DEF_CPUS=all
DEF_VERSIONS=all
DEF_LABELS=all
DEF_CUTOFFS=none
DEF_REPS=1

print_help()
{
	echo "$0 [options]"
	echo "Where options are:"
	echo "-c cpus_list		List of number of cpus to use for executions"
	echo "-C class_list		List of execution classes to use"
	echo "-check			Enable verification"
	echo "-debug			Show extra messages"
	echo "-h			Prints this help"
	echo "-r repetitions		Number of repetitions to use for execution"
	echo "-i inputs_list		List of inputs to use for executions"
	echo "-x cutoff_list		List of cutoffs to use for executions"
	echo "-l label_list		List of labels (compilers) to use for executions"
	echo "-v versions_list		List of versions of the benchmark to use for execution"
	echo "-verbose 0|1|2		Set application verbosity"
	echo "-of [0..4]		Set output format (see benchmark help to further details)"

}

parse_args ()
{
	while [ "$1" ]; do
		case $1 in
			"-c")   shift; ARG_CPUS=$1
				;;
			"-C")   shift; ARG_CLASSES=$1
				;;
			"-check")
			        VERIFY="-c"
				;;
			"-debug") VERBOSE=yes
				;;
			"-h") 	print_help $0; exit 
				;;
			"-r")   shift; ARG_REPS=$1
				;;
			"-i")   shift; ARG_INPUTS=$1
				;;
			"-x")   shift; ARG_CUTOFFS=$1
				;;
			"-l")	shift; ARG_LABELS=$1
				;;
			"-v")   shift; ARG_VERSIONS=$1
				;;
			"-verbose")
				shift; EXTRA="$EXTRA -v $1"
				;;
                        "-of")  shift; EXTRA="$EXTRA -o $1"
                                ;;
			*)
				echo "Unkown option $1"; print_help $0; exit
				;;
		esac	
	shift
	done
}

parse_class_file ()
{
	local file=$CLASS_DIR/$1
	shift

	while read line; do
		if [ "${line:0:1}" = "[" ]; then
			local n=${#line}
			local class=${line:1:n-2}

			# is one of the class definitions we want to load?
			# otherwise skip
			skip=true
			for c in $*; do
				if [ $c = $class ]; then
					skip=
					break
				fi	
			done
		else
			[ "$skip" ] && continue
			key=${line%%=*}
			value=${line#*=}
	
			case $key in
				sizes)  eval ${class}_input=$value;;
				inputs) eval ${class}_input=$value;;
				cutoff) eval ${class}_cutoff=$value;;
				ompenv) eval ${class}_ompenv="$value";;
			esac

		fi
	done < $file
}


compute_max_cpus ()
{
#TODO: Add other systems here
	case $(uname -s) in
        "Darwin")
            max_cpus=$(sysctl -n hw.ncpu)
            ;;
		"Linux")
		      if [ -f /proc/$$/cpuset -a -d /dev/cpuset ]; then
		        cpuset=`cat /proc/$$/cpuset`
			max_cpus=$(cat /dev/cpuset/$cpuset/cpus | sed "s/\(.*\)-\(.*\)/\2-\1+1/" | bc)
		      else
		        max_cpus=$(cat /proc/cpuinfo  | grep ^processor | wc -l)
	              fi
				;;
		"AIX") max_cpus=$(lsdev -Sa -Cc processor | wc -l)
				;;
		*) echo "WARNING: Don't know how to compute max cpus in this enviroment. Defaulting to 1"
		   max_cpus=1
		   ;;
	esac
}


expand_cpus ()
{
	local tmp=$(echo $CPUS | tr , ' ' )

	CPUS=
	for cpus in $tmp; do
		if echo $cpus | egrep "^[0-9]+$" > /dev/null; then
			#is a number
			CPUS="$CPUS $cpus"
		elif echo $cpus | grep "\.\." > /dev/null; then
			#is a range, range format is low..upper[/step]

			low=${cpus%..*}
			upper=${cpus#*..}

			if echo $upper | grep / > /dev/null; then
				step=${upper#*/}
				upper=${upper%/*}
			else
				step=1
			fi

			if [ "$upper" = "all" ]; then
				compute_max_cpus
				upper=$max_cpus
			fi

			CPUS="$CPUS $(seq $low $step $upper)"
			
		elif [ "$cpus" = "all" ]; then
			compute_max_cpus
			CPUS="$CPUS $max_cpus"
		fi
	done

	
}

expand_versions ()
{
	if [ "$VERSIONS" = "all" ]; then
		VERSIONS=$(ls $BIN/$APP* | sed s@.*/@@ | cut -d. -f3 | sort | uniq )
	else
		VERSIONS=$(echo $VERSIONS | tr , '  ')
	fi
}

expand_inputs ()
{
	INPUTS=$(echo $INPUTS | tr , '  ')
}

expand_cutoffs ()
{
	if [ "$CUTOFFS" = "all" ]; then
        CUTOFFS=none
    else
        CUTOFFS=$(echo $CUTOFFS | tr , '  ')
    fi
}

expand_labels ()
{
	if [ "$LABELS" = "all" ]; then
		LABELS=$(ls $BIN/$APP* | sed s@.*/@@ | cut -d. -f2 | sort | uniq )
	else
		LABELS=$(echo $LABELS | tr , '  ')
	fi
}

set_values ()
{

	if [ "$ARG_CLASSES" ]; then
		parse_class_file $APP $(echo $ARG_CLASSES | tr , ' ')
	fi

	if [ "$ARG_CPUS" ]; then
		CPUS=$ARG_CPUS
	else
		CPUS=$DEF_CPUS
	fi 
	expand_cpus

	if [ "$ARG_VERSIONS" ]; then
		VERSIONS=$ARG_VERSIONS
	else
		VERSIONS=$DEF_VERSIONS
	fi 
	expand_versions

	if [ "$ARG_LABELS" ]; then
		LABELS=$ARG_LABELS
	else
		LABELS=$DEF_LABELS
	fi
	expand_labels

	if [ "$ARG_INPUTS" ]; then
		INPUTS=$ARG_INPUTS
	elif [ "$ARG_CLASSES" ]; then
		INPUTS=
	else
		INPUTS=$DEF_INPUTS
	fi 
	expand_inputs

	if [ "$ARG_CUTOFFS" ]; then
		CUTOFFS=$ARG_CUTOFFS
	else
		CUTOFFS=$DEF_CUTOFFS
	fi
    expand_cutoffs
	
	if [ "$ARG_REPS" ]; then
		REPS=$ARG_REPS
	else
		REPS=$DEF_REPS
	fi
}

exec_serial ()
{
	command=$BIN/$2
	cpus=$1
	shift 2

	$command $*
	return 0
}

exec_omp ()
{
	command=$BIN/$2
	cpus=$1
	shift 2
    
	OMP_NUM_THREADS=$cpus $command $*
	return 0
}

exec_external ()
{
	local cpus=$1
	local app=$2
	local label=$3
	local version=$4
	local cutoff=$5
	shift 4

	local bin=$BIN/$app.$label.$version
	local args="$*"

	local EXEC=$EXEC_MANAGER
	[ "$file" ] && local basefile=$(basename $file | tr -d .)
	EXEC=$(echo $EXEC | sed s/%app%/$app/ | sed s/%cpus%/$cpus/ | sed s/%version%/$version/ | sed s/%cutoff%/$cutoff/ | sed s/%label%/$label/)
	EXEC=$(echo $EXEC | sed s@%bin%@$bin@ | sed "s@%args%@$args@" | sed "s@%command%@$bin $args@" )
	if [ "$file" -o "$size" -o "$pair" ]; then
		EXEC=$(echo $EXEC | sed s@%input%@${basefile}${size}${pair}@ )
	fi

	eval $EXEC
}

exec_app ()
{
	app=$1
	label=$2
	version=$3
	cpus=$4
    cutoff=$5
	shift 5

	if (echo $version | grep serial) > /dev/null; then
	   if [ "$serial_run" = "yes" ]; then
	      return 0
	   else
	      serial_run="yes"
	   fi
	fi
    
    if [ "$cutoff" = "none" ]; then
        extra_cutoff=
    else
        extra_cutoff=
        case $version in
        omp-tasks-if_clause* | omp-tasks-manual* | omp-tasks-final* | omp-tasks-final_ser*)  
           extra_cutoff="-x $cutoff"
           ;;
         esac
    fi
	extra_reps="-r $REPS"

	[ "$EXEC_MANAGER" ] && exec_external $cpus $app $label $version $extra_cutoff $* && return
	(echo $version | grep serial) > /dev/null && exec_serial $cpus $app.$label.$version $* && return
	(echo $version | grep omp) > /dev/null && exec_omp $cpus $app.$label.$version $extra_cutoff $extra_reps $*  && return

	echo "FATAL ERROR: Don't know how to execute $version"
	exit 1
}

exec_all ()
{
local mode=$1

for label in $LABELS; do
for args in $INPUTS; do
serial_run=no
for cpus in $CPUS; do
for cutoff in $CUTOFFS; do
for version in $VERSIONS; do

case $mode in
  size) INPUT="-n $args"; size=$args
	;;
  file) file=$args
        if [ ! -e $file ]; then
	  if [ -e $INPUTS_DIR/$APP/$file ]; then
		file=$INPUTS_DIR/$APP/$file
	  else
	      echo "Warning: Unknown input $file (skipping)"
	      continue
	  fi
        fi
	INPUT="-f $file"
	;;
  pair) pair=$args
        p1=${pair%x*}
        p2=${pair#*x}
        INPUT="-n $p1 -m $p2"
	;;
esac

[ "$VERBOSE" ] && echo "Executing $APP($label,$version) with $cpus CPUS"
exec_app $APP $label $version $cpus $cutoff $INPUT $VERIFY $EXTRA

done
done
done
done
done

for class in $(echo $ARG_CLASSES | tr , ' '); do
for label in $LABELS; do
serial_run=no
for cpus in $CPUS; do
for cutoff in $CUTOFF; do
for version in $VERSIONS; do

case $mode in
  size) eval "size=\$${class}_input"
        INPUT="-n $size"
	;;
  file) eval "file=\$${class}_input"
        if [ ! -e $file ]; then
	  if [ -e $INPUTS_DIR/$APP/$file ]; then
		file=$INPUTS_DIR/$APP/$file
	  else
	      echo "Warning: Unknown input $file (skipping)"
	      continue
	  fi
        fi
        INPUT="-f $file"
	;;
  pair) eval "pair=\$${class}_input"
        p1=${pair%x*}
        p2=${pair#*x}
        INPUT="-n $p1 -m $p2"
	;;
esac

CLASS=
case $version in
   omp-tasks-if_clause* | omp-tasks-manual* | omp-tasks-final* | omp-tasks-final_ser*)  
       eval "cutoff=\$${class}_cutoff"
       if [ $cutoff ]; then
  	   CLASS="$CLASS -x $cutoff" 
       fi
       ;;
esac

ENV=
case $version in
   omp*)
       eval "ENV=\$${class}_ompenv"
       ;;
esac
   


[ "$VERBOSE" ] && echo "Executing $APP ($label,$version) with $cpus CPUS"

eval $ENV exec_app $APP $label $version $cpus $cutoff $INPUT $CLASS $VERIFY $EXTRA

done
done
done
done
done
}

exec_all_sizes ()
{
   exec_all size
}

exec_all_files ()
{
   exec_all file
}

exec_all_pairs ()
{
   exec_all pair
}

if [ -z "$APP" ]; then
	APP=$(basename $0 | sed "s/run-\(.*\).sh/\1/")
fi

BIN=$BASE_DIR/bin
RUN=$BASE_DIR/run
CLASS_DIR=$BASE_DIR/config/classes
INPUTS_DIR=$BASE_DIR/inputs
