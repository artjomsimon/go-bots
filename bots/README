/**********************************************************************************************/
/*  This program is part of the Barcelona OpenMP Tasks Suite                                  */
/*  Copyright (C) 2009 Barcelona Supercomputing Center - Centro Nacional de Supercomputacion  */
/*  Copyright (C) 2009 Universitat Politecnica de Catalunya                                   */
/*                                                                                            */
/*  This program is free software; you can redistribute it and/or modify                      */
/*  it under the terms of the GNU General Public License as published by                      */
/*  the Free Software Foundation; either version 2 of the License, or                         */
/*  (at your option) any later version.                                                       */
/*                                                                                            */
/*  This program is distributed in the hope that it will be useful,                           */
/*  but WITHOUT ANY WARRANTY; without even the implied warranty of                            */
/*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                             */
/*  GNU General Public License for more details.                                              */
/*                                                                                            */
/*  You should have received a copy of the GNU General Public License                         */
/*  along with this program; if not, write to the Free Software                               */
/*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA            */
/**********************************************************************************************/

SUITE DESCRIPTION

The objective of the suite is to provide a collection of applications that allow to test
OpenMP tasking implementations. Most of the kernels come from existing ones from other
projects. Each of them comes with different implementations that allow to test different
possibilities of the OpenMP task model (task tiedness, cut-offs, single/multiple generators,
etc). It currently comes with the following kernels:

   + Alignment: Aligns sequences of proteins.
   + FFT: Computes a Fast Fourier Transformation.
   + Floorplan: Computes the optimal placement of cells in a floorplan.
   + Health: Simulates a country health system.
   + NQueens: Finds solutions of the N Queens problem.
   + Sort: Uses a mixture of sorting algorithms to sort a vector.
   + SparseLU: Computes the LU factorization of a sparse matrix.
   + Strassen: Computes a matrix multiply with Strassen's method.

FILE DESCRIPTION

The package directory is organized as follows:

   + ./bin: target directory when compiling the benchmarks (generated by `./configure').
   + ./common: source code for common objects.
   + ./config: config directory, assist the compilation phase.
   + ./inputs: input files for some of the benchmarks (when needed).
   + ./omp-tasks: source code for the OpenMP Task versions.
   + ./run: scripts for running the benchmarks.
   + ./serial: source code for the serial versions.
   + ./templates: template directory.

SUITE COMPILATION

Briefly, the shell commands `./configure' and  `make' should configure and build this package.

The `./configure' shell script attempts to guess correct values for various system-dependent
variables used during compilation (compiler and OpenMP specific flags). The shell script
examines the compilers installed in the system and let the user choose among them.  It uses
those values to create a `make.config' in `./config' directory which will be used during
the suite compilation.

If you need to change compilers, linkers or compilation options you can change manually the
file `./config/make.config'.

OTHER ISSUES TO TAKE INTO ACCOUNT

Some benchmarks are coded following a recursive model which makes an intensive use of stack
frames. It is usually needed to increase default stack sizes when working with high recursion
levels. Main stack size can be increased using `ulimit -s' linux command. Thread stacks are
usually controlled through runtime specific environment variable (e.g. Intel C Compiler uses
KMP_STACKSIZE=`value' for this purpose).

Developer activities and documentation are centralized in http://nanos.ac.upc.edu

Mail suggestions and bug reports to xxxxxxxx@bsc.es, or using our ticket system in the web
site: http://nanos.ac.upc.edu/projects/bots


